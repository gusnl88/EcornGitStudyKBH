깃허브 스터디 프로젝스

1.README 파일생성
2.git status: 상태를 확인하는 명령어
->Untracked :저장소에서 참조하지 않은 파일(New File)
3.git add README:해당 파일은 Staginf Area  영역에서 추적하는 명령어
->Staged new file README: index 에서 해당 파일을 추적하는 중이다.
->nothing to commit, working tree clean :작업이력과 저장소 이력이 같다.
4.git commit -m "": index 에서 추적하는 내역을 .git(저장소)에 저장하는 명령어
5.README 파일을 수정후 저장 :Untracked modified
->modified README:작업이력과 저장소 이력이 다르다.->저장해라!
6.추적 git add README :Staged modified : README
7.git commit -m "":저장("README 수정후 저장")

**파일생성 후 저장
untracked -> staged -unmodified(committed)
**파일 수정 후 저장
modified->staged->unmodified(committed)

암기 !!
git init : git 저장소 생성 (.git 포함하는 하위 폴더는 모두 저장소에서 관리)
git diff / git diff [파일명]: 작업내역과 저장소의 이력을 비교해서 보여주는 명령어
git diff --staged : 추적하는(index) 내역과 저장소의 이력을 비교해서 보여주는 명령어
git add  . 또는 * 또는 [파일명]:작업내역을 index에서 추적하는 명령어(. :하위폴더,숨김폴더에 
있는 모든 파일, *:이전에 추가한적이 있었던 모든 파일(새로운 파일 제외)
git commit -m "" :index에서 추적하는 내역을 저장소에 저장하는 명령어
git commit -a -m "":git add *+git commit -m "" :추적과 저장이 합쳐진 명령어
git reset HEAD <file> :추적하는 파일을 추적하지 않는 상태로 변경

.gitignore :파일을 작성하면 index에서 감시하지 않을 파일이나 폴더를 추가할 수 있다.
(컴퓨터나 편집기 설정 파일을 제외한다.git 프로젝트 안에 다른 git 프로젝트 가 있을때)

git log : 커밋이력을 보는 명령어
git log -p:
git log --pretty:
git log -[수]:
git log --graph:
git log --stat :얼마나 저장 삭제 수정했는지

git commit --amend :커밋의 멘트를 변경하고 싶을 때(잘 사용하지 않음)
git checkout --. or<파일명> : 제일 마지막에 저장했던 이력으로 되돌림.
작업내역에 문제가 있을 때 마지막에 저장한 내역으로 초기화 하는 명령어.(작업
내역 취소,생각보다 많이 사용)

branch : 기존 작업에서 다른 작업을 하고 싶을 때 생성하는 가지.
(main, master) branch : git init 시 최초로 생성되는 가지 배포,병합하는 메인 가지다
(절대 삭제하지 않는다. main(github에서 권장하는 이름)
git branch < 가지이름>: 새로운 branch(가지)를 생성하는 명령어.
git checkout <가지이름> :해당 가지를 선택해서 작업하겠다는(HEAD를 변경) 명령어
git checkout -b <가지이름>:가지를 생성하면서 HEAD를 변경하는 명령어.